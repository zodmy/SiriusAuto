generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  products  Product[]
  parentId  Int?
  parent    Category?  @relation(fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade, name: "CategoryToSubcategory")
  children  Category[] @relation("CategoryToSubcategory")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("categories")
}

model Manufacturer {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("manufacturers")
}

model Product {
  id                 Int                           @id @default(autoincrement())
  name               String
  description        String?
  price              Decimal
  stockQuantity      Int
  categoryId         Int
  category           Category                      @relation(fields: [categoryId], references: [id])
  manufacturerId     Int
  manufacturer       Manufacturer                  @relation(fields: [manufacturerId], references: [id])
  orderItems         OrderItem[]
  compatibleVehicles Compatibility[]
  productOptions     ProductOption[]
  isVariant          Boolean
  baseProductId      Int?
  baseProduct        Product?                      @relation("BaseProductToVariants", fields: [baseProductId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  variants           Product[]                     @relation("BaseProductToVariants")
  reviews            Review[]
  averageRating      Float?                        @default(0.0)
  createdAt          DateTime                      @default(now())
  updatedAt          DateTime                      @updatedAt

  @@map("products")
}

model CarMake {
  id            Int                           @id @default(autoincrement())
  name          String                        @unique
  models        CarModel[]
  compatibility Compatibility[]
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt

  @@map("car_makes")
}

model CarModel {
  id            Int                           @id @default(autoincrement())
  makeId        Int
  make          CarMake                       @relation(fields: [makeId], references: [id])
  name          String
  years         CarYear[]
  compatibility Compatibility[]
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt

  @@unique([makeId, name])
  @@map("car_models")
}

model CarYear {
  id            Int                           @id @default(autoincrement())
  modelId       Int
  model         CarModel                      @relation(fields: [modelId], references: [id])
  year          Int
  engines       CarEngine[]
  compatibility Compatibility[]
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt

  @@unique([modelId, year])
  @@map("car_years")
}

model CarEngine {
  id            Int                           @id @default(autoincrement())
  yearId        Int
  year          CarYear                       @relation(fields: [yearId], references: [id])
  name          String // Наприклад, "1.6L Petrol", "2.0L Diesel"
  bodyTypes     CarBodyType[]
  compatibility Compatibility[]
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt

  @@unique([yearId, name])
  @@map("car_engines")
}

model CarBodyType {
  id            Int                           @id @default(autoincrement())
  engineId      Int
  engine        CarEngine                     @relation(fields: [engineId], references: [id])
  name          String // Наприклад, "Sedan", "Hatchback", "SUV"
  modifications CarModification[]
  compatibility Compatibility[]
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt

  @@unique([engineId, name])
  @@map("car_body_types")
}

model CarModification {
  id            Int                           @id @default(autoincrement())
  bodyTypeId    Int
  bodyType      CarBodyType                   @relation(fields: [bodyTypeId], references: [id])
  name          String? // Наприклад, "Base", "Sport", "Luxury" (може бути необов'язковим)
  compatibility Compatibility[]
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt

  @@unique([bodyTypeId, name])
  @@map("car_modifications")
}

model Compatibility {
  id                Int              @id @default(autoincrement())
  productId         Int
  product           Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  carModificationId Int?
  carModification   CarModification? @relation(fields: [carModificationId], references: [id], onDelete: Cascade)
  carBodyTypeId     Int?
  carBodyType       CarBodyType?     @relation(fields: [carBodyTypeId], references: [id], onDelete: Cascade)
  carEngineId       Int?
  carEngine         CarEngine?       @relation(fields: [carEngineId], references: [id], onDelete: Cascade)
  carYearId         Int?
  carYear           CarYear?         @relation(fields: [carYearId], references: [id], onDelete: Cascade)
  carModelId        Int?
  carModel          CarModel?        @relation(fields: [carModelId], references: [id], onDelete: Cascade)
  carMakeId         Int?
  carMake           CarMake?         @relation(fields: [carMakeId], references: [id], onDelete: Cascade)

  @@unique([productId, carModificationId, carBodyTypeId, carEngineId, carYearId, carModelId, carMakeId], name: "compatibility_unique_idx")
  @@map("compatibility")
}

model User {
  id         Int      @id @default(autoincrement())
  telegramId BigInt   @unique
  firstName  String
  lastName   String?
  orders     Order[]
  reviews    Review[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("users")
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  totalPrice Decimal
  orderDate  DateTime    @default(now())
  status     OrderStatus
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, productId])
  @@map("order_items")
}

model ProductOption {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, name, value])
  @@map("product_options")
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
  @@map("reviews")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED

  @@map("order_statuses")
}
