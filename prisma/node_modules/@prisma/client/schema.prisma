datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

model Administrator {
  administrator_id Int    @id @default(autoincrement())
  username         String @unique @db.VarChar(50)
  password_hash    String @db.VarChar(255)

  @@map("Administrators")
}

model Brand {
  brand_id    Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.Text
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  products    Product[]

  @@map("Brands")
}

model Category {
  category_id Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.Text
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  products    Product[]

  @@map("Categories")
}

model Product {
  product_id                    Int                           @id @default(autoincrement())
  name                          String                        @db.VarChar(255)
  description                   String?                       @db.Text
  part_number                   String                        @unique @db.VarChar(50)
  brand_id                      Int?
  category_id                   Int?
  purchase_price                Decimal?                      @db.Decimal(10, 2)
  selling_price                 Decimal                       @db.Decimal(10, 2)
  stock_quantity                Int                           @default(0)
  image_url                     String?                       @db.VarChar(255)
  created_at                    DateTime?                     @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime?                     @default(now()) @db.Timestamptz(6)
  brand                         Brand?                        @relation(fields: [brand_id], references: [brand_id], onDelete: NoAction, onUpdate: NoAction)
  category                      Category?                     @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  order_items                   OrderItem[]
  supply_order_items            SupplyOrderItem[]
  product_discounts             ProductDiscount[]
  product_vehicle_compatibility ProductVehicleCompatibility[]

  @@index([brand_id])
  @@index([category_id])
  @@map("Products")
}

model Customer {
  customer_id  Int       @id @default(autoincrement())
  first_name   String    @db.VarChar(50)
  last_name    String    @db.VarChar(50)
  email        String?   @unique @db.VarChar(100)
  phone_number String?   @db.VarChar(20)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  orders       Order[]

  @@map("Customers")
}

model Order {
  order_id         Int         @id @default(autoincrement())
  customer_id      Int?
  order_date       DateTime?   @default(now()) @db.Timestamptz(6)
  shipping_address String?     @db.VarChar(255)
  order_status     String?     @db.VarChar(50)
  total_amount     Decimal?    @db.Decimal(10, 2)
  payment_method   String?     @db.VarChar(50)
  transaction_id   String?     @db.VarChar(100)
  created_at       DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?   @default(now()) @db.Timestamptz(6)
  customer         Customer?   @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction)
  order_items      OrderItem[]

  @@index([customer_id])
  @@map("Orders")
}

model OrderItem {
  order_item_id Int      @id @default(autoincrement())
  order_id      Int?
  product_id    Int?
  quantity      Int
  unit_price    Decimal? @db.Decimal(10, 2)
  subtotal      Decimal? @db.Decimal(10, 2)
  order         Order?   @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction)
  product       Product? @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([order_id])
  @@index([product_id])
  @@map("Order_Items")
}

model Supplier {
  supplier_id    Int           @id @default(autoincrement())
  name           String        @unique @db.VarChar(100)
  contact_person String?       @db.VarChar(100)
  phone_number   String?       @db.VarChar(20)
  email          String?       @db.VarChar(100)
  address        String?       @db.VarChar(255)
  created_at     DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?     @default(now()) @db.Timestamptz(6)
  supply_orders  SupplyOrder[]

  @@map("Suppliers")
}

model SupplyOrder {
  supply_order_id    Int               @id @default(autoincrement())
  supplier_id        Int?
  order_date         DateTime?         @default(now()) @db.Timestamptz(6)
  delivery_date      DateTime?         @db.Date
  order_status       String?           @db.VarChar(50)
  total_amount       Decimal?          @db.Decimal(10, 2)
  created_at         DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?         @default(now()) @db.Timestamptz(6)
  supplier           Supplier?         @relation(fields: [supplier_id], references: [supplier_id], onDelete: NoAction, onUpdate: NoAction)
  supply_order_items SupplyOrderItem[]

  @@index([supplier_id])
  @@map("Supply_Orders")
}

model SupplyOrderItem {
  supply_order_item_id Int          @id @default(autoincrement())
  supply_order_id      Int?
  product_id           Int?
  quantity             Int
  unit_price           Decimal?     @db.Decimal(10, 2)
  subtotal             Decimal?     @db.Decimal(10, 2)
  supply_order         SupplyOrder? @relation(fields: [supply_order_id], references: [supply_order_id], onDelete: NoAction, onUpdate: NoAction)
  product              Product?     @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([supply_order_id])
  @@index([product_id])
  @@map("Supply_Order_Items")
}

model Discount {
  discount_id       Int               @id @default(autoincrement())
  name              String            @db.VarChar(100)
  description       String?           @db.Text
  discount_type     String            @db.VarChar(50) // CHECK (discount_type IN ('percentage', 'fixed')) - This check constraint is not directly mapped in Prisma schema, it should be handled in application logic or database constraints (if supported by the provider).
  discount_value    Decimal           @db.Decimal(10, 2)
  is_active         Boolean?          @default(true)
  start_date        DateTime?         @db.Date
  end_date          DateTime?         @db.Date
  created_at        DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?         @default(now()) @db.Timestamptz(6)
  product_discounts ProductDiscount[]

  @@index([is_active])
  @@map("Discounts")
}

model ProductDiscount {
  product_discount_id Int       @id @default(autoincrement())
  product_id          Int?
  discount_id         Int?
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  product             Product?  @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
  discount            Discount? @relation(fields: [discount_id], references: [discount_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([product_id, discount_id])
  @@index([product_id])
  @@index([discount_id])
  @@map("Product_Discounts")
}

model Vehicle {
  vehicle_id                    Int                           @id @default(autoincrement())
  make                          String                        @db.VarChar(50)
  model                         String                        @db.VarChar(50)
  year                          Int?                          @db.SmallInt
  engine_type                   String?                       @db.VarChar(50)
  product_vehicle_compatibility ProductVehicleCompatibility[]

  @@map("Vehicles")
}

model ProductVehicleCompatibility {
  compatibility_id Int      @id @default(autoincrement())
  product_id       Int?
  vehicle_id       Int?
  notes            String?  @db.Text
  product          Product? @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
  vehicle          Vehicle? @relation(fields: [vehicle_id], references: [vehicle_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([product_id])
  @@index([vehicle_id])
  @@map("Product_Vehicle_Compatibility")
}
